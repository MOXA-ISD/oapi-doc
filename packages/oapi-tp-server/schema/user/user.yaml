swagger: '2.0'

info:
  version: 2.1.0
  title: ThingsPro Gateway RESTful API reference
basePath: '/api/v1'
schemes:
  - http
  - https
produces:
  - application/json
securityDefinitions:
  mx-api-token:
    type: apiKey
    name: mx-api-token
    in: header
    description: ThingsPro RESTful API token, The token should be created on web console.

tags:
  - name: user
    description: Handles user field data

paths:
  '/users':
    get:
      description: Get all users field data
      responses:
        200:
          description: An array of users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
          examples: { 'application/json': { $ref: '#/externalDocs/x-mocks/UserList' } }
      tags:
        - user
      security:
        - mx-api-token: []
    post:
      description: Create a new user.
      parameters:
        - name: body
          in: body
          description: ''
          required: true
          schema:
            $ref: '#/definitions/UserReq'
      responses:
        201:
          description: Create user successfully
          schema:
            type: object
            properties:
              token:
                type: string
                description: Granted authentication token.
          examples:
            token:
              type: string
              description: Granted authentication token.
      tags:
        - user
      security:
        - mx-api-token: []
    delete:
      description: Delete multiple users.
      parameters:
        - name: body
          in: body
          description: Delete user ids
          required: true
          schema:
            $ref: '#/definitions/ObjectIDs'
      responses:
        204:
          description: success
      tags:
        - user
      security:
        - mx-api-token: []
  /users/{id}:
    parameters:
      - name: id
        in: path
        description: User unique identifier
        required: true
        type: string
    get:
      description: Return user data with given ID
      tags:
        - user
      security:
        - mx-api-token: []
      responses:
        200:
          description: An Object of the user
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
          examples: { 'application/json': { $ref: '#/externalDocs/x-mocks/User' } }
    put:
      description: Return updated user data with given ID
      parameters:
        - name: body
          in: body
          description: Information of User
          required: true
          schema:
            $ref: '#/definitions/UserReq'
      responses:
        200:
          description: An Object of the user
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
          examples: { 'application/json': { $ref: '#/externalDocs/x-mocks/User' } }
    delete:
      description: Delete User with given ID
      tags:
        - user
      security:
        - mx-api-token: []
      responses:
        204:
          description: success

definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        description: Unique identifier representing a specific user.
      name:
        type: string
        description: Name of user.
      company:
        type: string
        description: Company of user.
      email:
        type: string
        description: Email of user.
      role:
        type: object
        items:
          - $ref: '#/definitions/Role'

  UserReq:
    type: object
    properties:
      name:
        type: string
        description: Name of user.
      password:
        type: string
        description: Password of user.
      company:
        type: string
        description: Company of user.
      email:
        type: string
        description: Email of user.
      roleId:
        type: integer
        description: Role Id associated by user.

  ObjectIDs:
    type: array
    items:
      type: string
      description: ID of object
      example: ['1', '2']

externalDocs:
  url: 'http://#'
  x-mocks:
    User:
      {
        'id': 1,
        'name': 'Moxa',
        'company': 'moxa',
        'email': 'moxa@moxa.com',
        'role':
          {
            'id': 1,
            'name': 'root',
            'permissions':
              [
                { 'id': 1, 'value': 2, 'name': 'DM', 'description': 'xxxxx' },
                { 'id': 2, 'value': 2, 'name': 'account', 'description': 'xxxxx' },
              ],
          },
      }
    UserList:
      [
        {
          'id': 1,
          'name': 'Moxa',
          'company': 'moxa',
          'email': 'moxa@moxa.com',
          'role':
            {
              'id': 1,
              'name': 'root',
              'permissions':
                [
                  { 'id': 1, 'value': 2, 'name': 'DM', 'description': 'xxxxx' },
                  { 'id': 2, 'value': 2, 'name': 'account', 'description': 'xxxxx' },
                ],
            },
        },
        {
          'id': 2,
          'name': 'Moxa2',
          'company': 'moxa',
          'email': 'moxa2@moxa.com',
          'role':
            {
              'id': 1,
              'name': 'root',
              'permissions':
                [
                  { 'id': 1, 'value': 2, 'name': 'DM', 'description': 'xxxxx' },
                  { 'id': 2, 'value': 2, 'name': 'account', 'description': 'xxxxx' },
                ],
            },
        },
      ]
    UserReq: { 'name': 'Moxa', 'password': '12345678', 'company': 'moxa', 'email': 'moxa@moxa.com', 'roleId': 2 }
