swagger: '2.0'

info:
  version: 0.0.0
  title: DLM Company Portal RESTful API reference
basePath: '/api/v1'
schemes:
  - http
  - https
produces:
  - application/json
tags:
  - name: project
    description: Handles projects data

paths:
  /projects:
    get:
      description: Get all projects
      tags:
        - project
      parameters:
        - name: name
          in: query
          description: Filter the project list by project name
          required: false
          type: string
        - name: status
          in: query
          description: Filter the project list by project status
          required: false
          type: string  
          enum:
          - enable
          - disable
          - removed
        - name: order
          in: query
          description: The project list order by some keyword. default is order by 'createdAt'
          required: false
          type: string
          enum:
          - name
          - status
        - name: sort
          in: query
          description: Sorting the filter project list, default is asc
          required: false
          type: string
          enum:
          - desc
          - asc
        - name: limit
          in: query
          description: max return projects count (default is 100 and max is 1000)
          required: false
          type: integer
        - name: offset
          in: query
          description: offset
          required: false
          type: integer
      responses:
        200:
          description: An array of projects
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Project'
              count:
                type: integer
              offset:
                type: integer
              limit:
                type: integer
            example: 
              $ref: '#/externalDocs/x-mocks/ProjectList'
    post:
      description: Create a new project.
      tags:
        - project
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ProjectCreate'
      responses:
        201:
          description: Create project successfully
          schema:
            type: object
            properties:
              data:
                type: object
                items:
                  $ref: '#/definitions/ProjectRes'
            example:
              $ref: '#/externalDocs/x-mocks/ProjectRes'

  /projects/{projectId}:
    parameters:
      - name: projectId
        in: path
        description: project unique identifier
        required: true
        type: string
    get:
      description: Return project data with given ID
      tags:
        - project
      responses:
        200:
          description: An Object of the project
          schema:
            type: object
            properties:
              data:
                type: object
                items:
                  $ref: '#/definitions/ProjectRes'
            example:
              $ref: '#/externalDocs/x-mocks/ProjectRes'
    put:
      description: Return updated project data with given ID
      tags:
        - project
      parameters:
        - name: body
          in: body
          description: Information of project
          required: true
          schema:
            $ref: '#/definitions/ProjectUpdate'
      responses:
        200:
          description: An Object of the project
          schema:
            type: object
            properties:
              data:
                type: object
                items:
                  $ref: '#/definitions/ProjectRes'
            example: 
              $ref: '#/externalDocs/x-mocks/ProjectRes'

  /projects/{projectId}/enroll:
    parameters:
      - name: projectId
        in: path
        description: project unique identifier
        required: true
        type: string
      - name: mode
        in: query
        description: Return enroll PK and cert in text mode, don't response hyperlink
        required: false
        type: string  
        enum:
        - text
    post:
      description: Return enroll certificate and key
      tags:
        - project
      parameters:
        - name: body
          in: body
          description: Information of device
          required: true
          schema:
            $ref: '#/definitions/EnrollCreate'
      responses:
        200:
          description: Response enroll certificate and key
          schema:
            type: object
            properties:
              data:
                type: object
                items:
                  $ref: '#/definitions/EnrollRes'
            example: 
              $ref: '#/externalDocs/x-mocks/EnrollRes'

  /projects/{projectId}/users:
    parameters:
      - name: projectId
        in: path
        description: project unique identifier
        required: true
        type: string
    get:
      description: Return users of project data with given ID
      tags:
        - project
      responses:
        200:
          description: An array of project users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
            example:
              $ref: '#/externalDocs/x-mocks/ProjectUserList'

definitions:
  Project:
    type: object
    properties:
      projectId:
        type: string
        description: Unique identifier representing a specific project.
      name:
        type: string
        description: Project name of project.
      status:
        type: string
        enum:
          - enable
          - disable
          - removed
        description: Status of project.
      createdAt:
        type: string
        description: project created time,ISO data format, like '2018-08-12T20:17:46.384Z'. 
  ProjectRes:
    type: object
    properties:
      data:
        type: object
        items:
          $ref: '#/definitions/Project'
  ProjectCreate:
    type: object
    properties:
      name:
        type: string
        description: Project name of project.
  ProjectUpdate:
    type: object
    properties:
      name:
        type: string
        description: Project name of project.
      status:
        type: string
        enum:
          - enable
          - disable
          - removed
        description: Status of project.
  EnrollCreate:
    type: object
    required:
    - mac
    - serialNumber
    - modelName
    description: Device connection data payload
    properties:
      mac:
        type: string
        description: Device mac.
      serialNumber:
        type: string
        description: Device serial number.  
      modelName:
        type: string
        description: Device model name.
  EnrollRes:
    type: object
    description: Return enroll PK and cert, the default mode is hyperlink mode, server will response(enrollPKLink + enrollCertLink), if mode=text in query string, server will response (enrollPK + enrollCert)
    properties:
      deviceId:
        type: string
        description: Device id.
      enrollPK:
        type: string
        description: Private key.
      enrollCert:
        type: string
        description: Certificate.
      enrollPKLink:
        type: string
        description: Private key.
      enrollCertLink:
        type: string
        description: Certificate.
externalDocs:
  url: 'http://#'
  x-mocks:
    Project:
      {
        "projectId": "ed31872d-b57e-4c94-a989-c2782c0d3fe7",
        "name": "MOXA",
        "status": "enable",
        "createdAt": "2019-03-08T07:18:27:565Z"
      }
    ProjectRes:
      {
        "data": {
          "projectId": "ed31872d-b57e-4c94-a989-c2782c0d3fe7",
          "name": "MOXA",
          "status": "enable",
          "createdAt": "2019-03-08T07:18:27:565Z"
        }
      }  
    ProjectList:
      {
        "count": 13,
        "data": [
          {
            "projectId": "ed31872d-b57e-4c94-a989-c2782c0d3fe7",
            "name": "MOXA",
            "status": "enable",
            "createdAt": "2019-03-08T07:18:27:565Z"
          }
        ],
        "limit": 1,
        "offset": 0
      }
    ProjectCreate:
      {
        "name": "MOXA"
      }
    ProjectUpdate:
      {
        "name": "MOXA",
        "status": "enable"
      }
    EnrollCreate:
      {
        "mac": "001122334455",
        "serialNumber": "12345678",
        "modelName": "UC-8112"
      }
    EnrollRes:
      {
        "data": {
          "deviceId": "65af94c4-07e4-43d7-abad-3cb5f295550b",
          "enrollPK": "moxa",
          "enrollCert": "moxa",
          "enrollPKLink": "http://www.moxa.com/download=12345",
          "enrollCertLink": "http://www.moxa.com/download=abcde"
        }
      }
    BatchEnrollRes:
      [
        {
          "deviceId": "65af94c4-07e4-43d7-abad-3cb5f295550b",
          "mac": "001122334455",
          "enrollPK": "moxa",
          "enrollCert": "moxa"
        }
      ]
    ProjectUserList:
      {
        "count": 28,
        "data": [
          {
            "companyId": "07473967-3c29-4914-b275-d0511c42554e",
            "userId": "a1be69eb-258e-4c66-b07b-583474e57305",
            "status": "enable",
            "role": {
                "roleId": 2,
                "name": "Administrator",
                "admin": true,
                "permissions": [
                  {
                    "id": 1,
                    "value": 0
                  },
                  {
                    "id": 2,
                    "value": 0
                  }
                ]
            },
            "username": "owen",
            "email": "owen@moxa.com",
            "createdAt": "2019-03-08T08:44:13.425Z",
            "updatedAt": "2019-03-08T08:44:13.425Z",
            "loginedAt": "",  
            "passwordExpiredAt": "2019-01-22T07:51:26.214Z"
          }
        ],
        "limit": 1,
        "offset": 1
      }

    