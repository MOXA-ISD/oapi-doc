swagger: '2.0'

info:
  version: 0.0.2
  title: ThingsPro Tenant Portal RESTful API reference
basePath: '/api/v1'
schemes:
  - http
  - https
produces:
  - application/json

tags:
  - name: user
    description: Handles user field data

paths:
  /users:
    get:
      description: Get all users field data
      tags:
        - user
      responses:
        200:
          description: An array of users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
          examples: { 'application/json': { $ref: '#/externalDocs/x-mocks/UserList' } }
    post:
      description: Create a new user.
      tags:
        - user
      parameters:
        - name: body
          in: body
          description: ''
          required: true
          schema:
            $ref: '#/definitions/UserCreate'
      responses:
        201:
          description: Create user successfully
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
          examples: { 'application/json': { $ref: '#/externalDocs/x-mocks/User' } }

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        description: User unique identifier
        required: true
        type: string
    get:
      description: Return user data with given ID
      tags:
        - user
      responses:
        200:
          description: An Object of the user
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
          examples: { 'application/json': { $ref: '#/externalDocs/x-mocks/User' } }
    put:
      description: Return updated user data with given ID
      tags:
        - user
      parameters:
        - name: body
          in: body
          description: Information of User
          required: true
          schema:
            $ref: '#/definitions/UserUpdate'
      responses:
        200:
          description: An Object of the user
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
          examples: { 'application/json': { $ref: '#/externalDocs/x-mocks/User' } }
    delete:
      description: Delete User with given ID
      tags:
        - user
      responses:
        204:
          description: success

  /users/{userId}/enable:
    parameters:
      - name: userId
        in: path
        description: User unique identifier
        required: true
        type: string
    put:
      description: Enable a user in this tenant
      tags:
        - user
      responses:
        200:
          description: An Object of the user
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
          examples: { 'application/json': { $ref: '#/externalDocs/x-mocks/User' } }

  /users/{userId}/disable:
    parameters:
      - name: userId
        in: path
        description: User unique identifier
        required: true
        type: string
    put:
      description: Disable a user in this tenant
      tags:
        - user
      responses:
        200:
          description: An Object of the user
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
          examples: { 'application/json': { $ref: '#/externalDocs/x-mocks/User' } }

  /users/avatar:
    post:
      description: Upload an image file for non logged in user
      tags:
        - user
      consumes:
        - multipart/form-data
      parameters:
        - name: image
          in: formData
          description: an image file
          required: true
          type: file
      responses:
        200:
          description: Upload an image file
          schema:
            type: object
            items:
              $ref: '#/definitions/UserAvatar'
          examples: { 'application/json': { $ref: '#/externalDocs/x-mocks/UserAvatar' } }
    put:
      description: Upload an image file for logged in user
      tags:
        - user
      consumes:
        - multipart/form-data
      parameters:
        - name: image
          in: formData
          description: an image file
          required: true
          type: file
      responses:
        200:
          description: Upload an image file
          schema:
            type: object
            items:
              $ref: '#/definitions/UserAvatar'
          examples: { 'application/json': { $ref: '#/externalDocs/x-mocks/UserAvatar' } }

  /users/changePassword:
    put:
      description: Upload an image file for logged in user
      tags:
        - user
      parameters:
        - name: body
          in: body
          description: Information of Passowrd
          required: true
          schema:
            $ref: '#/definitions/UserChangePassword'
      responses:
        200:
          description: An Object of the user
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
          examples: { 'application/json': { $ref: '#/externalDocs/x-mocks/User' } }

  /users/forgetPassword:
    post:
      description: Send an email to user for reset password
      tags:
        - user
      parameters:
        - name: email
          in: body
          description: Input user email
          required: true
          schema:
            $ref: '#/definitions/UserForgetPassword'
      responses:
        200:
          description: success

  /users/resetPassword/{code}:
    put:
      description: Reset password by forget password email link
      tags:
        - user
      parameters:
        - name: code
          in: path
          description: Reset passowrd code
          required: true
          type: string
        - name: body
          in: body
          description: Information of Passowrd
          required: true
          schema:
            $ref: '#/definitions/UserResetPassword'
      responses:
        200:
          description: An Object of the user
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
          examples: { 'application/json': { $ref: '#/externalDocs/x-mocks/User' } }

  /users/exist/{email}:
    parameters:
      - name: email
        in: path
        description: User email
        required: true
        type: string
    get:
      description: Determining if the email exists in this tenant
      tags:
        - user
      responses:
        200:
          description: Determining if the email exists
          schema:
            type: object
            items:
              $ref: '#/definitions/UserExist'
          examples: { 'application/json': { $ref: '#/externalDocs/x-mocks/UserExist' } }

definitions:
  User:
    type: object
    properties:
      tenantId:
        type: string
        description: Unique identifier representing a specific tenant.
      userId:
        type: string
        description: Unique identifier representing a specific user.
      displayName:
        type: string
        description: Username of user.
      firstName:
        type: string
        description: First name of user.
      lastName:
        type: string
        description: Last name of user.
      avatar:
        type: string
        description: Avatar of user.
      email:
        type: string
        description: Email of user.  
      company:
        type: string
        description: Company of user.
      department:
        type: string
        description: Department of user.
      employeeId:
        type: string
        description: Employee Id of user.
      phone:
        type: string
        description: Phone of user.
      status:
        type: string
        description: Enable Status of user.
      data:
        type: object
        description: Metadata of user.
      loginAt:
        type: string
        description: User last login time,ISO data format, like '2018-08-12T20:17:46.384Z'.
      tenant:
        type: object
        description: Tenant permission.
        properties:
          permission:
            type: array
            items:
              '$ref': '#/definitions/Permission'
            description: Group permission list.
      groupList:
        type: array
        description: Group permission.
        items:
          '$ref': '#/definitions/Group'   
      roleList:
        type: array
        description: List of role which contains the user.
        items:
          '$ref': '#/definitions/Role'

  Group:
    type: object
    properties:
      groupId:
        type: integer
        description: Unique identifier representing a specific group.
      groupName:
        type: string
        description: Name of group.  
      permission:
        type: array
        items:
          '$ref': '#/definitions/Permission'
        description: Group permission list.

  Role:
    type: object
    properties:
      id:
        type: integer
        description: Role id.
      name:
        type: string
        description: Role name.
      value:
        type: integer
        description: Role value.

  Permission:
    type: object
    properties:
      id:
        type: integer
        description: Permission id.
      name:
        type: string
        description: Permission name.
      value:
        type: integer
        description: Permission value.

  UserExist:
    type: object
    properties:
      exist:
        type: boolean
        description: Determining if the email exists in this tenant.

  UserAvatar:
    type: object
    properties:
      exist:
        type: string
        description: Return an absolute path in azure storage

  UserChangePassword:
    type: object
    properties:
      oldPassword:
        type: string
        description: Old Password.
        maxLength: 100
      newPassword:
        type: string
        description: New Passoword.
        maxLength: 100

  UserForgetPassword:
    type: object
    properties:
      email:
        type: string
        description: Email of user.
        maxLength: 254

  UserResetPassword:
    type: object
    properties:
      email:
        type: string
        description: Password of user.
        maxLength: 100

  UserCreate:
    type: object
    properties:
      displayName:
        type: string
        description: Display name of user.
        maxLength: 30
      firstName:
        type: string
        description: First name of user.
        maxLength: 255
      lastName:
        type: string
        description: Last name of user.
        maxLength: 255
      email:
        type: string
        description: Email of user.
        maxLength: 254
      avatar:
        type: string
        description: Avatar of user.
        maxLength: 2083
      password:
        type: string
        description: Password of user.
        maxLength: 100
      company:
        type: string
        description: Company of user.
        maxLength: 50
      department:
        type: string
        description: Department of user.
        maxLength: 50
      employeeId:
        type: string
        description: Employee id of user.
        maxLength: 8
      phone:
        type: string
        description: Phone of user.
        maxLength: 50
      data:
        type: object
        description: metadata of user.

  UserUpdate:
    type: object
    properties:
      displayName:
        type: string
        description: Display name of user.
        maxLength: 30
      firstName:
        type: string
        description: First name of user.
        maxLength: 255
      lastName:
        type: string
        description: Last name of user.
        maxLength: 255
      avatar:
        type: string
        description: Avatar of user.
        maxLength: 2083
      company:
        type: string
        description: Company of user.
        maxLength: 50
      department:
        type: string
        description: Department of user.
        maxLength: 50
      employeeId:
        type: string
        description: Employee id of user.
        maxLength: 8
      phone:
        type: string
        description: Phone of user.
        maxLength: 50
      data:
        type: object
        description: metadata of user.

externalDocs:
  url: 'http://#'
  x-mocks:
    User:
      {
        "tenantId": "65af94c4-07e4-43d7-abad-3cb5f295550b",
        "userId": "f503cd6e-bb0a-4f6a-b0b7-42d7f89e07ef",
        "displayName": "Ryan Wang",
        "firstName": "Ryan",
        "lastName": "Wang",
        "avatar": "https://thingspro9dev4system.blob.core.windows.net/images/avatar/f503cd6e-bb0a-4f6a-b0b7-42d7f89e07ef.jpg",
        "email": "ryan@moxa.com",
        "company": "MOXA Inc.",
        "department": "Department",
        "employeeId": "123",
        "phone": "02-89191230",
        "status": "Enabled",
        "loginAt": "2018-08-12T20:17:46.384Z",
        "data": 
          {
            "CUSTOM_FIELD": "CUSTOM_VALUE"
          },
        "tenant": {
          "permission": [
            { "id": 1, "name": "User/Role management", "value": 2 },
            { "id": 2, "name": "Device register/grouping", "value": 2 }
          ]
        },
        "groupList": [
          { 
            "groupId": 1, 
            "groupName": "All devices", 
            "permission": [
              { "id": 3, "name": "View device information", "value": 2 },
              { "id": 4, "name": "Full manage device", "value": 1 }
            ]
          }
        ],
        "roleList": [
          {
            "id": 2,
            "name": "Device Register",
            "type": "tenant"
          }
        ]
      }
    UserExist:
      { "exist": true }
    UserAvatar:
      { "path": "https://thingspro9dev4system.blob.core.windows.net/images/avatar/test.png" }
    UserChangePassword:
      {
        "oldPassword":"moxamoxa",
        "newPassword":"123456"
      }
    UserForgetPassword:
      {
        "email":"cainhc.chen@moxa.com"
      }
    UserRsetPassword:
      {
        "password":"moxamoxa"
      }
    InviteReq:
      { 
        "email": "kevin@moxa.com",
        "tenant": {
          "permission": [
            { "id": 1, "name": "User/Role management", "value": 2 },
            { "id": 2, "name": "Device register/grouping", "value": 2 }
          ]
        },
        "groupList": [
          { 
            "groupId": 1, 
            "groupName": "All devices", 
            "permission": [
              { "id": 3, "name": "View device information", "value": 2 },
              { "id": 4, "name": "Full manage device", "value": 1 }
            ]
          }
        ]
      }      
    UserCreate:
      {
        "email":"ediejy.lin@moxa.com",
        "displayName":"Edie Lin",
        "firstName":"Edie",
        "lastName":"Lin",
        "password":"moxamoxa"
      }
    UserUpdate:
      {
        "avatar": "https://thingspro9dev4system.blob.core.windows.net/images/avatar/7dc93587-5444-48bf-a196-da811c39959d.jpg",
        "company": "moxa",
        "data": {},
        "displayName": "Cain Chen",
        "email": "cainhc.chen@moxa.com",
        "employeeId": "20180003",
        "firstName": "Cain",
        "lastName": "Chen",
        "phone": "02-89191230#7262"
      }
    UserList:
      {
        "count": 2,
        "data": [
            {
                "tenantId": "ed31872d-b57e-4c94-a989-c2782c0d3fe7",
                "userId": "a1be69eb-258e-4c66-b07b-583474e57305",
                "displayName": "Rick Peng",
                "firstName": "Rick",
                "lastName": "Peng",
                "avatar": "https://thingspro9dev4system.blob.core.windows.net/images/avatar/a1be69eb-258e-4c66-b07b-583474e57305.jpg",
                "email": "rick.peng@moxa.com",
                "company": "moxa",
                "department": "iss",
                "employeeId": "20040003",
                "phone": "02-89191230",
                "status": "Enabled",
                "data": {},
                "loginAt": "2019-01-29T05:29:00:297Z",
                "tenant": {
                    "permission": []
                },
                "grouplist": [],
                "role": [
                    {
                        "id": 1,
                        "name": "Administrator",
                        "type": 0
                    }
                ]
            },
            {
                "tenantId": "ed31872d-b57e-4c94-a989-c2782c0d3fe7",
                "userId": "aedd319a-3d21-4ba5-aee8-0b8ec2806b09",
                "displayName": "Owen Kao",
                "firstName": "Owen",
                "lastName": "Kao",
                "avatar": "https://thingspro9dev4system.blob.core.windows.net/images/avatar/aedd319a-3d21-4ba5-aee8-0b8ec2806b09.jpg",
                "email": "owenyc.kao@moxa.com",
                "company": "moxa",
                "department": "iss",
                "employeeId": "20170163",
                "phone": "02-89191230",
                "status": "Enabled",
                "data": {},
                "loginAt": "2019-01-29T05:29:00:297Z",
                "role": [
                    {
                        "id": 2,
                        "name": "Device Register",
                        "type": 1
                    },
                    {
                        "id": 3,
                        "name": "System Manager",
                        "type": 1
                    },
                    {
                        "id": 4,
                        "name": "User Manager",
                        "type": 1
                    },
                    {
                        "id": 5,
                        "name": "Full device manager",
                        "type": 2
                    }
                ],
                "tenant": {
                    "permission": [
                        {
                            "id": 1,
                            "name": "User/Role management",
                            "value": 1
                        },
                        {
                            "id": 2,
                            "name": "Device register/grouping",
                            "value": 1
                        }
                    ]
                },
                "grouplist": [
                    {
                        "id": 5,
                        "name": "Full device manager",
                        "permission": [
                            {
                                "id": 3,
                                "name": "View device information",
                                "value": 1
                            },
                            {
                                "id": 4,
                                "name": "Full manage device",
                                "value": 1
                            }
                        ]
                    }
                ]
            }
        ],
        "limit": 100,
        "offset": 0
    }
