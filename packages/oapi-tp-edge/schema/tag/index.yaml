openapi: '3.0.0'

info:
  title: Tag APIs
  description: Tag APIs
  version: "3.2.0"

servers:
  - url: https://127.0.0.1/api/v1
  - url: http://tagservice_app_1:8082/api/v1
    description: Authentication free

tags:
  - name: "Tag"

components:
  schemas:
    DeleteTemplateList:
      type: 'object'
      properties:
        list:
          type: 'array'
          items:
            type: 'object'
            properties:
              template_name:
                type: 'string'
                example: 'temp1'
              protocol_name:
                type: 'string'
                example: 'EthernetIP'
    TemplateList:
      type: 'object'
      properties:
        list:
          type: 'array'
          items:
            $ref: '#/components/schemas/Template'
    Template:
      type: 'object'
      properties:
        template_name:
          type: 'string'
        tag_list:
          type: 'array'
          items:
            $ref: '#/components/schemas/ModbusTag'
      example:
        template_name: 'temp1'
        protocol_name: 'EthernetIP'
        tag_list:
          - op: 'write'
            polling_period_ms: 100
            request_timeout_ms: 10
            address: 0
            type: 'uint16'
            id: 'do0'
            quantity: 2
          - op: 'write'
            polling_period_ms: 100
            request_timeout_ms: 10
            address: 2
            type: 'uint16'
            id: 'do1'
            quantity: 2
    Tag:
      type: 'object'
      properties:
        srcName:
          type: 'string'
        tagName:
          type: 'string'
        dataType:
          type: 'string'
          enum: [uint8, uint16, uint32, uint64, int16, int32, int64, float32, float64, string, boolean, bytearray]
        duration:
          type: 'integer'
          format: 'int32'
        dataUnit:
          type: 'string'
        access:
          type: 'string'
          enum: [ro, wo, rw]
    TagList:
      type: 'object'
      required:
        - tag_list
      properties:
        tag_list:
          type: 'array'
          items:
            $ref: '#/components/schemas/Tag'
      example:
        tag_list:
          - srcName: 'device0'
            tagName: 'di0'
            dataType: 'uint16'
            duration: 100
            dataUnit: ''
            access: 'ro'
          - srcName: 'device0'
            tagName: 'di1'
            dataType: 'uint16'
            duration: 100
            dataUnit: ''
            access: 'ro'
    ModbusTag:
      type: 'object'
      properties:
        op:
          type: 'string'
        polling_period_ms:
          type: 'integer'
        request_timeout_ms:
          type: 'integer'
        address:
          type: 'integer'
        type:
          type: 'string'
        id:
          type: 'string'
        quantity:
          type: 'integer'
    Device:
      type: 'object'
      required:
        - name
        - interface
        - template_name
      properties:
        name:
          type: string
        interface:
          type: string
        template_name:
          type: string
      example:
        name: adapter_device0
        interface: eth0
        template_name: temp4
        total_tags: 20
        success_tags: 16
        t_to_o_packet_rate: 100
        o_to_t_data_size: 496
        connection_type: 0
        o_to_t_real_time_format: 1
        o_to_t_instance: 100
        encapsulation_timeout: 0
        configuration_instance: 1
        adapter_port: 44818
        t_to_o_data_size: 496
        adapter_ip: 10.144.33.155
        t_to_o_real_time_format: 0
        o_to_t_packet_rate: 100
        timeout_multiplier: 2
        t_to_o_instance: 200
    DeviceList:
      type: 'object'
      required:
        - device_list
      properties:
        device_list:
          type: 'array'
          items:
            $ref: '#/components/schemas/Device'

    Export:
      type: 'object'
      properties:
        url:
          type: 'string'
      example:
        url: '/run/shm/tag-io-configs.tar.gz'
    Import:
      type: 'object'
      properties:
        fieldbus:
          type: 'array'
          items:
            type: 'object'
            required:
              - name
              - status
            properties:
              name:
                type: string
              status:
                type: string

paths:
  /tags/{type}:
    parameters:
      - name: type
        in: path
        schema:
          type: string
          enum: [fieldbus, system, virtual]
        required: true
    get:
      tags:
        - Tag
      summary: Gets all tags with given type.
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagList'

  /tags/{type}/templates:
    parameters:
      - name: type
        in: path
        schema:
          type: string
          enum: [fieldbus, EthernetIP, modbus]
        required: true
    get:
      tags:
        - Tag
      summary: Gets template list by given fieldbus protocol
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateList'
    delete:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTemplateList'
      tags:
        - Tag
      summary: Deletes template list by given fieldbus protocol
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTemplateList'
  /tags/{type}/templates/{name}:
    parameters:
      - name: type
        in: path
        schema:
          type: string
          enum: [EthernetIP, modbus]
        required: true
      - name: name
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - Tag
      summary: Gets `fieldbus tag settings` by the given protocol and template name.
      responses:
        200:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
    post:
      tags:
        - Tag
      summary: Adds a new `IO template` by the given protocol and template name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Template'
      responses:
        200:
          description: Successful response.
    put:
      tags:
        - Tag
      summary: Updates an `IO template` by the given protocol and template name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Template'
      responses:
        200:
          description: Successful response.
    delete:
      tags:
        - Tag
      summary: Remove an IO template
      description: |
        Removes an `IO template` by the given protocol and template name.
      responses:
        200:
          description: Successful removing the template.
  /tags/{type}/devices:
    parameters:
      - name: type
        schema:
          enum: [fieldbus, EthernetIP, modbus]
          type: string
        in: path
        required: true
      - name: template
        in: query
        schema:
          type: string
    get:
      tags:
        - Tag
      summary: Gets all devices
      description: |
        Gets all devices that refer to the given template, |
        otherwise remove all devices of the type
      responses:
        200:
          description: Succeed to get device list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceList'
    delete:
      tags:
        - Tag
      summary: Removes all devices
      description: |
        Removes all devices that refer to the given template
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceList'
      responses:
        200:
          description: Succeed to remove devices
  /tags/{type}/devices/{name}:
    parameters:
      - name: type
        schema:
          enum: [EthernetIP, modbus]
          type: string
        in: path
        required: true
      - name: name
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - Tag
      summary: Adds a device
      description: |
        Adds an device config by given protocol and device name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        200:
          description: Ok.
    put:
      tags:
        - Tag
      summary: Updates a device
      description: |
        Updates an device config by given protocol and device name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        200:
          description: Ok.
    delete:
      tags:
        - Tag
      summary: Remove a device
      description: |
        Removes an device config by given protocol and device name.
      responses:
        200:
          description: OK.

  /tags/{type}/configs:
    parameters:
      - name: type
        schema:
          enum: [fieldbus]
          type: string
        in: path
        required: true
    get:
      tags:
        - Tag
      summary: Export all io configuration
      description: Export all io configuration from fieldbus folders
      responses:
        200:
          description: Successful export IO configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Export'
    put:
      tags:
        - Tag
      summary: Import all io configuration
      description: Import all io configuration to fieldbus folders
      responses:
        200:
          description: Successful import `IO` configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Import'
