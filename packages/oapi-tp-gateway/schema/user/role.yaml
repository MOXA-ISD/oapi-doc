swagger: '2.0'

info:
  version: 2.1.0
  title: ThingsPro Gateway RESTful API reference
basePath: '/api/v1'
schemes:
  - http
  - https
produces:
  - application/json
securityDefinitions:
  mx-api-token:
    type: apiKey
    name: mx-api-token
    in: header
    description: ThingsPro RESTful API token, The token should be created on web console.

tags:
  - name: role
    description: Handles role field data

paths:
  '/roles':
    get:
      description: Get all roles data
      responses:
        200:
          description: An array of role
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
          examples: { 'application/json': { $ref: '#/externalDocs/x-mocks/RoleList' } }
      tags:
        - role
      security:
        - mx-api-token: []
    post:
      description: Create a new role.
      parameters:
        - name: body
          in: body
          description: ''
          required: true
          schema:
            $ref: '#/definitions/RoleReq'
      responses:
        201:
          description: Create role successfully
      tags:
        - role
      security:
        - mx-api-token: []
    delete:
      description: Delete multiple roles.
      parameters:
        - name: body
          in: body
          description: Delete role ids
          required: true
          schema:
            $ref: '#/definitions/ObjectIDs'
      responses:
        204:
          description: success
      tags:
        - role
      security:
        - mx-api-token: []
  /roles/{id}:
    parameters:
      - name: id
        in: path
        description: Role unique identifier
        required: true
        type: string
    get:
      description: Return role data with given ID
      responses:
        200:
          description: An Object of the role
          schema:
            type: object
            items:
              $ref: '#/definitions/Role'
          examples: { 'application/json': { $ref: '#/externalDocs/x-mocks/Role' } }
      tags:
        - role
      security:
        - mx-api-token: []
    put:
      description: Return updated user data with given ID
      parameters:
        - name: body
          in: body
          description: Information of role
          required: true
          schema:
            $ref: '#/definitions/RoleReq'
      responses:
        200:
          description: An Object of the role
          schema:
            type: object
            items:
              $ref: '#/definitions/Role'
          examples: { 'application/json': { $ref: '#/externalDocs/x-mocks/Role' } }
      tags:
        - role
      security:
        - mx-api-token: []
    delete:
      description: Delete role with given ID
      responses:
        204:
          description: success
      tags:
        - role
      security:
        - mx-api-token: []

definitions:
  Role:
    title: Role
    type: object
    properties:
      id:
        type: integer
        description: Unique identifier representing a specific user.
      name:
        type: string
        description: Name of role.
      permissions:
        type: array
        items:
          type: object
          items:
            - $ref: '#/definitions/Permission'

  RoleReq:
    title: Role
    type: object
    properties:
      name:
        type: string
        description: Name of role.
      permissions:
        type: array
        items:
          type: object
          items:
            - $ref: '#/definitions/Permission'
  ObjectIDs:
    type: array
    items:
      type: string
      description: ID of object
      example: ['1', '2']

externalDocs:
  url: 'http://#'
  x-mocks:
    Role:
      {
        'id': 1,
        'name': 'root',
        'permissions':
          [
            { 'id': 1, 'value': 2, 'name': 'DM', 'description': 'xxxxx' },
            { 'id': 2, 'value': 2, 'name': 'account', 'description': 'xxxxx' },
          ],
      }
    RoleReq: { 'name': 'new role', 'permissions': [{ 'id': 1, 'value': 2 }, { 'id': 2, 'value': 2 }] }
    RoleList:
      [
        {
          'id': 1,
          'name': 'root',
          'permissions':
            [
              { 'id': 1, 'value': 2, 'name': 'DM', 'description': 'xxxxx' },
              { 'id': 2, 'value': 2, 'name': 'account', 'description': 'xxxxx' },
            ],
        },
        {
          'id': 2,
          'name': 'admin',
          'permissions': [{ 'id': 1, 'value': 0, 'name': 'user management', 'description': 'xxxxx' }],
        },
      ]
