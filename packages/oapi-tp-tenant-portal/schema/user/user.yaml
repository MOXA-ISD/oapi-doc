swagger: '2.0'

info:
  version: 0.0.0
  title: ThingsPro Tenant Portal RESTful API reference
basePath: '/api/v1'
schemes:
  - http
  - https
produces:
  - application/json

tags:
  - name: user
    description: Handles user field data

paths:
  /users:
    get:
      description: Get all users field data
      tags:
        - user
      parameters:
        - name: name
          in: query
          description: Filter the user list by user name
          required: false
          type: string
        - name: email
          in: query
          description: Filter the user list by email
          required: false
          type: string
        - name: active
          in: query
          description: Filter the user list by active
          required: false
          type: string
        - name: order
          in: query
          description: The user list order by some keyword.
          required: false
          type: string
          enum:
          - name
          - email
          - active
        - name: sort
          in: query
          description: Sorting the filter user list, default is desc
          required: false
          type: string
          enum:
          - desc
          - asc
        - name: limit
          in: query
          description: max return users count (default is 100 and max is 1000)
          required: false
          type: integer
        - name: offset
          in: query
          description: offset
          required: false
          type: integer
      responses:
        200:
          description: An array of users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
            example: 
              $ref: '#/externalDocs/x-mocks/UserList'
    post:
      description: Create a new user.
      tags:
        - user
      parameters:
        - name: body
          in: body
          description: ''
          required: true
          schema:
            $ref: '#/definitions/UserCreate'
      responses:
        201:
          description: Create user successfully
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
            example: 
              $ref: '#/externalDocs/x-mocks/User'
    delete:
      description: Delete Users
      tags:
        - user
      parameters:
        - name: body
          in: body
          description: ''
          required: true
          schema:
            type: object
            items:
              $ref: '#/definitions/UserBatch'
            example:
              $ref: '#/externalDocs/x-mocks/UuidList'
      responses:
        204:
          description: success

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        description: User unique identifier
        required: true
        type: string
    get:
      description: Return user data with given ID
      tags:
        - user
      responses:
        200:
          description: An Object of the user
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
            example: 
              $ref: '#/externalDocs/x-mocks/User'
    put:
      description: Return updated user data with given ID
      tags:
        - user
      parameters:
        - name: body
          in: body
          description: Information of User
          required: true
          schema:
            $ref: '#/definitions/UserUpdate'
      responses:
        200:
          description: An Object of the user
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
            example: 
              $ref: '#/externalDocs/x-mocks/User'
    delete:
      description: Delete User with given ID
      tags:
        - user
      responses:
        204:
          description: success

  /users/avatar:
    put:
      description: Upload an image file for logged in user
      tags:
        - user
      parameters:
        - name: image
          in: formData
          description: use form-data to upload a image. key = image, value = {image file}
          required: true
          type: file
      responses:
        200:
          description: Upload an image file
          schema:
            type: object
            items:
              $ref: '#/definitions/UserAvatar'
            example: 
              $ref: '#/externalDocs/x-mocks/UserAvatar'

  /users/changePassword:
    put:
      description: Upload an image file for logged in user
      tags:
        - user
      parameters:
        - name: body
          in: body
          description: Information of Passowrd
          required: true
          schema:
            $ref: '#/definitions/UserChangePassword'
      responses:
        200:
          description: An Object of the user
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
            example: 
              $ref: '#/externalDocs/x-mocks/User'

  /users/forgetPassword:
    post:
      description: Send an email to user for reset password
      tags:
        - user
      parameters:
        - name: email
          in: body
          description: Input user email
          required: true
          schema:
            $ref: '#/definitions/UserForgetPassword'
      responses:
        200:
          description: success

  /users/resetPassword/{code}:
    put:
      description: Reset password by forget password email link
      tags:
        - user
      parameters:
        - name: code
          in: path
          description: Reset passowrd code
          required: true
          type: string
        - name: body
          in: body
          description: Information of Passowrd
          required: true
          schema:
            $ref: '#/definitions/UserResetPassword'
      responses:
        200:
          description: An Object of the user
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
            example: 
              $ref: '#/externalDocs/x-mocks/User'

  /users/exist/{email}:
    parameters:
      - name: email
        in: path
        description: User email
        required: true
        type: string
    get:
      description: Determining if the email exists in this tenant
      tags:
        - user
      responses:
        200:
          description: Determining if the email exists
          schema:
            type: object
            items:
              $ref: '#/definitions/UserExist'
            example: 
              $ref: '#/externalDocs/x-mocks/UserExist'

  /users/invite:
    post:
      description: Invite users to join this tenant
      tags:
        - user
      parameters:
        - name: body
          in: body
          description: ''
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/UserInvite'
      responses:
        201:
          description: Invite users successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
            example: 
              $ref: '#/externalDocs/x-mocks/UserList'

  /users/invite/{inviteId}:
    parameters:
      - name: inviteId
        in: path
        description: Invitee data ID
        required: true
        type: string
    get:
      description: Return Invitee data with given ID
      tags:
        - user
      responses:
        200:
          description: An Object of the invitee
          schema:
            type: object
            items:
              $ref: '#/definitions/Invitee'
            example: 
              $ref: '#/externalDocs/x-mocks/Invitee'

  /tenantInfo:
    get:
      description: get tenant info
      responses:
        200:
          description: Return tenant info
          schema:
            $ref: '#/definitions/TenantInfo'
            example: 
              $ref: '#/externalDocs/x-mocks/TenantInfo'
      tags:
        - user

definitions:
  User:
    type: object
    properties:
      tenantId:
        type: string
        description: Unique identifier representing a specific tenant.
      userId:
        type: string
        description: Unique identifier representing a specific user.
      displayName:
        type: string
        description: Username of user.
      firstName:
        type: string
        description: First name of user.
      lastName:
        type: string
        description: Last name of user.
      avatar:
        type: string
        description: Avatar of user.
      email:
        type: string
        description: Email of user.
      company:
        type: string
        description: Company of user.
      department:
        type: string
        description: Department of user.
      employeeId:
        type: string
        description: Employee Id of user.
      phone:
        type: string
        description: Phone of user.
      status:
        type: string
        description: Enable Status of user.
      data:
        type: object
        description: Metadata of user.
      loginAt:
        type: string
        description: User last login time, ISO data format, like '2018-08-12T20:17:46.384Z'.
      passwordExpireAt:
        type: string
        description: Last change password time, ISO data format, like '2018-08-12T20:17:46.384Z'.
      role:
        type: array
        description: List of role which contains the user.
        items:
          '$ref': '#/definitions/Role'
      permission:
        type: array
        items:
          '$ref': '#/definitions/Permission'
        description: permission list.

  Group:
    type: object
    properties:
      groupId:
        type: integer
        description: Unique identifier representing a specific group.
      groupName:
        type: string
        description: Name of group.  
      permission:
        type: array
        items:
          '$ref': '#/definitions/Permission'
        description: Group permission list.

  Role:
    type: object
    properties:
      id:
        type: integer
        description: Role id.
      name:
        type: string
        description: Role name.
      value:
        type: integer
        description: Role value.

  Permission:
    type: object
    properties:
      id:
        type: integer
        description: Permission id.
      name:
        type: string
        description: Permission name.
      value:
        type: integer
        description: Permission value.

  Invitee:
    type: object
    properties:
      inviteId:
        type: string
        description: Invite Data ID.
      inviter:
        type: string
        description: Inviter ID.
      domainName:
        type: string
        description: Tenant Domain Name.
      email:
        type: string
        description: Email of invitation.
      status:
        type: string
        description: Status of invitation.
      data:
        type: object
        description: Metadata of invitation.
      expireAt:
        type: string
        description: Expire date of invitation.
      createdAt:
        type: string
        description: Create date of invitation.
      updatedAt:
        type: string
        description: Update date of invitation.

  UserExist:
    type: object
    properties:
      exist:
        type: boolean
        description: Determining if the email exists in this tenant.

  UserAvatar:
    type: object
    properties:
      exist:
        type: string
        description: Return an absolute path in azure storage

  UserChangePassword:
    type: object
    properties:
      oldPassword:
        type: string
        description: Old Password.
        maxLength: 100
      newPassword:
        type: string
        description: New Passoword.
        maxLength: 100

  UserForgetPassword:
    type: object
    properties:
      email:
        type: string
        description: Email of user.
        maxLength: 254

  UserResetPassword:
    type: object
    properties:
      email:
        type: string
        description: Password of user.
        maxLength: 100

  UserBatch:
    type: array
    items:
      type: string

  UserCreate:
    type: object
    properties:
      displayName:
        type: string
        description: Display name of user.
        maxLength: 30
      firstName:
        type: string
        description: First name of user.
        maxLength: 255
      lastName:
        type: string
        description: Last name of user.
        maxLength: 255
      email:
        type: string
        description: Email of user.
        maxLength: 254
      password:
        type: string
        description: Password of user.
        maxLength: 100
      company:
        type: string
        description: Company of user.
        maxLength: 50
      department:
        type: string
        description: Department of user.
        maxLength: 50
      employeeId:
        type: string
        description: Employee id of user.
        maxLength: 8
      phone:
        type: string
        description: Phone of user.
        maxLength: 50

  UserUpdate:
    type: object
    properties:
      displayName:
        type: string
        description: Display name of user.
        maxLength: 30
      firstName:
        type: string
        description: First name of user.
        maxLength: 255
      lastName:
        type: string
        description: Last name of user.
        maxLength: 255
      avatar:
        type: string
        description: Avatar of user.
        maxLength: 2083
      company:
        type: string
        description: Company of user.
        maxLength: 50
      department:
        type: string
        description: Department of user.
        maxLength: 50
      employeeId:
        type: string
        description: Employee id of user.
        maxLength: 8
      phone:
        type: string
        description: Phone of user.
        maxLength: 50
      data:
        type: object
        description: metadata of user.
      oldPassword:
        type: string
        description: Old password of user login.
      newPassword:
        type: string
        description: New password of user login.

  UserInvite:
    type: object
    properties:
      email:
        type: string
        description: Email of user.
        maxLength: 254
      roleId:
        type: integer
        description: Role id.
        items:
          '$ref': '#/definitions/Role'

  TenantInfo:
    type: object
    properties:
      tenantId:
        type: string
        description: Unique identifier representing a specific tenant.
      domainName:
        type: string
        description: Domain name of tenant.
      portalName:
        type: string
        description: Portal name of tenant.
      company:
        type: string
        description: Company of tenant.
      email:
        type: string
        description: Email of tenant.
      username:
        type: string
        description: Username of tenant admin user.
      firstName:
        type: string
        description: First name of tenant admin user.
      lastName:
        type: string
        description: Last name of tenant admin user.
      activate:
        type: string
        description: Activate status of tenant.
      phone:
        type: string
        description: Phone of tenant.
      culture:
        type: string
        description: Culture of tenant.
      industry:
        type: string
        description: Industry of tenant.
      customer:
        type: boolean
        description: Is customer or not.
      provisionStatus:
        type: string
        description: Provision status of tenant.
      deviceHlr:
        type: string
        description: Device home location url.
      data:
        type: object
        description: metadata of tenant.
      activatedAt:
        type: string
        description: Tenant activate time, ISO data format, like '2018-08-12T20:17:46.384Z'.
      deactivatedAt:
        type: string
        description: Tenant deactivate time,ISO data format, like '2018-08-12T20:17:46.384Z'.
      createdBy:
        type: string
        description: Created tenant username
      createdAt:
        type: string
        description: Tenant created time,ISO data format, like '2018-08-12T20:17:46.384Z'.
      updatedAt:
        type: string
        description: Tenant updated time, ISO data format, like '2018-08-12T20:17:46.384Z'.

externalDocs:
  url: 'http://#'
  x-mocks:
    User:
      {
        "avatar": "https://thingspro9dev4system.blob.core.windows.net/images/avatar/7dc93587-5444-48bf-a196-da811c39959d.jpg",
        "company": "moxa",
        "data": {},
        "department": "",
        "displayName": "Cain Chen",
        "email": "cainhc.chen@moxa.com",
        "employeeId": "20180003",
        "firstName": "Cain",
        "lastName": "Chen",
        "loginAt": "2019-03-14T02:44:03:735Z",
        "passwordExpireAt": "2019-01-22T08:02:49:089Z",
        "phone": "02-89191230#7262",
        "role": {
          "admin": true,
          "id": 1,
          "name": "Administrator",
          "permission": [
            {
              "id": 1,
              "name": "User & Role management",
              "value": 1
            },
            {
              "id": 2,
              "name": "Device register",
              "value": 1
            },
            {
              "id": 3,
              "name": "Device grouping",
              "value": 1
            },
            {
              "id": 4,
              "name": "View device information",
              "value": 1
            },
            {
              "id": 5,
              "name": "Full manage device",
              "value": 1
            }
          ]
        },
        "status": "enabled",
        "tenantId": "ed31872d-b57e-4c94-a989-c2782c0d3fe7",
        "userId": "7dc93587-5444-48bf-a196-da811c39959d"
      }
    UserExist:
      { "exist": true }
    UserAvatar:
      { "path": "https://thingspro9dev4system.blob.core.windows.net/images/avatar/user/test.png" }
    UserChangePassword:
      {
        "oldPassword":"moxamoxa",
        "newPassword":"123456"
      }
    UserForgetPassword:
      {
        "email":"cainhc.chen@moxa.com"
      }
    UserRsetPassword:
      {
        "password":"moxamoxa"
      }
    UserCreate:
      {
        "email":"ediejy.lin@moxa.com",
        "displayName":"Edie Lin",
        "firstName":"Edie",
        "lastName":"Lin",
        "password":"moxamoxa"
      }
    UserUpdate:
      {
        "avatar": "https://thingspro9dev4system.blob.core.windows.net/images/avatar/7dc93587-5444-48bf-a196-da811c39959d.jpg",
        "company": "moxa",
        "data": {},
        "displayName": "Cain Chen",
        "email": "cainhc.chen@moxa.com",
        "employeeId": "20180003",
        "firstName": "Cain",
        "lastName": "Chen",
        "phone": "02-89191230#7262",
        "oldPassword":"123456",
        "newPassword":"moxamoxa"
      }
    UserInvite:
      [
        {
          "email":"13579@moxa.com",
          "roleId": 3
        },
        {
          "email":"24680@moxa.com",
          "roleId": 4
        }
      ]
    UserList:
      {
        "count": 1,
        "data": [
          {
            "avatar": "",
            "company": "moxa",
            "data": {},
            "department": "iss",
            "displayName": "Rick Peng",
            "email": "rick.peng@moxa.com",
            "employeeId": "20040003",
            "firstName": "Rick",
            "lastName": "Peng",
            "loginAt": "2019-02-27T06:45:44:015Z",
            "passwordExpireAt": "2019-01-22T07:51:26:214Z",
            "phone": "02-89191230",
            "role": {
              "admin": true,
              "id": 1,
              "name": "Administrator",
              "permission": [
                {
                  "id": 1,
                  "name": "User & Role management",
                  "value": 1
                },
                {
                  "id": 2,
                  "name": "Device register",
                  "value": 1
                },
                {
                  "id": 3,
                  "name": "Device grouping",
                  "value": 1
                },
                {
                  "id": 4,
                  "name": "View device information",
                  "value": 1
                },
                {
                  "id": 5,
                  "name": "Full manage device",
                  "value": 1
                }
              ]
            },
            "status": "enabled",
            "tenantId": "ed31872d-b57e-4c94-a989-c2782c0d3fe7",
            "userId": "a1be69eb-258e-4c66-b07b-583474e57305"
          }
        ],
        "limit": 100,
        "offset": 0
      }
    Invitee:
      {
        "inviteId": "762e7efb-8b49-4855-89a3-30f3adabf580",
        "inviter": "7dc93587-5444-48bf-a196-da811c39959d",
        "domainName": "tenant-dev",
        "email": "22222@moxa.com",
        "status": "Inviting",
        "data": {},
        "expireAt": "2019-02-24T08:41:29.773480Z",
        "createdAt": "2019-02-17T08:41:29.773480Z",
        "updatedAt": "2019-02-17T08:41:29.773480Z"
      }
    TenantInfo:
      {
        "activate": "approved",
        "activatedAt": "",
        "createdAt": "2019-01-22T07:49:07.104674Z",
        "createdBy": "Rick Peng",
        "culture": "zh-TW",
        "customer": false,
        "data": {},
        "deactivatedAt": "",
        "domainName": "tenant-dev",
        "industry": "Others",
        "portalName": "ISS",
        "provisionStatus": "Provision Completed. Email Sent Completed.",
        "services": [],
        "tenantId": "ed31872d-b57e-4c94-a989-c2782c0d3fe7",
        "updatedAt": "2019-01-22T07:49:07.104674Z"
      }
    UuidList:
      [
        "ed31872d-b57e-4c94-a989-c2782c0d3fe7"
      ]