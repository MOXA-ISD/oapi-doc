swagger: '2.0'

info:
  version: 0.0.0
  title: DLM Company Portal RESTful API reference
basePath: '/api/v1'
schemes:
  - http
  - https
produces:
  - application/json
tags:
  - name: profile
    description: Handles model profiles data

paths:
  /projects/{projectId}/modelProfiles:
    parameters:
      - name: projectId
        in: path
        description: project unique identifier
        required: true
        type: string
      - name: keyword
        in: query
        description: Search keyword by wildcard - support profile name
        required: false
        type: string
      - name: modelName
        in: query
        description: Filter the model profile list by modelName
        required: false
        type: string
      - name: createdBy
        in: query
        description: Filter the model profile list by creator
        required: false
        type: string
      - name: order
        in: query
        description: Sort the device list by specific condition, default is order by 'updatedAt'
        required: false
        type: string
        enum:
        - modelName
        - profileName
        - status
        - updatedAt
        - createdBy
      - name: sort
        in: query
        description: Sorting the filter device list, default is desc
        required: false
        type: string
        enum:
        - desc
        - asc
      - name: limit
        in: query
        description: max return devices count (default is 100 and max is 1000)
        required: false
        type: integer
      - name: offset
        in: query
        description: offset
        required: false
        type: integer
      - name: distinct
        in: query
        description: Get distict value of speific field, this query parameter will return string array only
        required: false
        type: string
        enum:
        - modelName
        - createdBy        
    get:
      description: Return modelProfile data with given ID
      tags:
        - profile
      responses:
        200:
          description: An object of the modelProfile
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/ModelProfile'
              count:
                type: integer
              offset:
                type: integer
              limit:
                type: integer
            example: 
              $ref: '#/externalDocs/x-mocks/ModelProfileList'
    post:
      description: Create profile, the default status is draft
      tags:
        - profile
      parameters:
        - name: body
          in: body
          description: Information of modelProfile
          required: true
          schema:
            $ref: '#/definitions/ModelProfileCreate'
      responses:
        200:
          description: An Object of the modelProfile
          schema:
            type: object
            properties:
              data:
                type: object
                items:
                  $ref: '#/definitions/ModelProfileRes'
            example: 
              $ref: '#/externalDocs/x-mocks/ModelProfileRes'
  /projects/{projectId}/modelProfiles/exist/{profileName}:
    parameters:
      - name: projectId
        in: path
        description: project unique identifier
        required: true
        type: string
      - name: profileName
        in: path
        description: quired profileName
        required: true
        type: string
    get:
      description: Determining if the profileName exists in this project
      tags:
        - user
      responses:
        200:
          description: Determining if the profileName exists
          schema:
            type: object
            properties:
              data:
                type: object
                items:
                  $ref: '#/definitions/ProfileNameExist'
            example: 
              $ref: '#/externalDocs/x-mocks/ProfileNameExist'
  /projects/{projectId}/modelProfiles/{modelPrfileId}:
    parameters:
      - name: projectId
        in: path
        description: project unique identifier
        required: true
        type: string
      - name: modelPrfileId
        in: path
        description: Unique identifier representing a specific model profile
        required: true
        type: string
    get:
      description: Return modelProfile data with given ID
      tags:
        - profile
      responses:
        200:
          description: An object of the modelProfile
          schema:
            type: object
            properties:
              data:
                type: object
                items:
                  $ref: '#/definitions/ModelProfileRes'
            example:
              $ref: '#/externalDocs/x-mocks/ModelProfileRes'
    put:
      description: Return updated modelProfile data with given ID
      consumes:
        - multipart/form-data
      parameters:
      - name: projectId
        in: path
        description: project unique identifier
        required: true
        type: string
      - name: modelPrfileId
        in: path
        description: Unique identifier representing a specific model profile
        required: true
        type: string
      - name: profile
        in: formData
        type: file
        description: Upload json file with profile data
        required: true
      - name: status
        in: formData
        type: string
        enum:
        - draft
        - ready
        description: Profile status
        required: true 
      - name: profileName
        in: formData
        type: string
        description: Profile Name
        required: true 
      tags:
        - profile
      responses:
        200:
          description: An Object of the modelProfile
          schema:
            type: object
            properties:
              data:
                type: object
                items:
                  $ref: '#/definitions/ModelProfileRes'
            example: 
              $ref: '#/externalDocs/x-mocks/ModelProfileRes'
    patch:
      description: update is defualt field
      parameters:
      - name: projectId
        in: path
        description: project unique identifier
        required: true
        type: string
      - name: modelPrfileId
        in: path
        description: Unique identifier representing a specific model profile
        required: true
        type: string
      - name: body
        in: body
        description: Information of modelProfile
        required: true
        schema:
          $ref: '#/definitions/ModelProfilePatch'
      tags:
        - profile
      responses:
        200:
          description: An Object of the modelProfile
          schema:
            type: object
            properties:
              data:
                type: object
                items:
                  $ref: '#/definitions/ModelProfileRes'
            example: 
              $ref: '#/externalDocs/x-mocks/ModelProfileRes'
  /projects/{projectId}/modelProfiles/{modelPrfileId}/download:
    parameters:
      - name: projectId
        in: path
        description: project unique identifier
        required: true
        type: string
      - name: modelPrfileId
        in: path
        description: Unique identifier representing a specific model profile
        required: true
        type: string
    post:
      description: Download profile
      tags:
        - profile
      responses:
        200:
          description: A download link
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  profileLink:
                    type: string
                    description: Download link.
            example:
              $ref: '#/externalDocs/x-mocks/ProfileDownload'
definitions:
  ModelProfile:
    type: object
    properties:
      id:
        type: integer
        description: Unique identifier representing a specific model profile.
      modelName:
        type: string
        description: Unique identifier representing a specific model name.
      profileName:
        type: string
        description: Profile name.
      createdBy:
        type: string
        description: User who create config repo.
      status:
        type: string
        enum:
        - draft
        - ready
        - archive
        description: Status of profile.    
      isDefault:
        type: boolean
        description: Is this profie as a defualt profile apply to device.
      createdAt:
        type: string
        description: Config repo created time, ISO data format, like '2018-08-12T20:17:46.384Z'.
      profile:
        type: object
        description: Model Profile.
  ModelProfileRes:
    type: object
    properties:
      data:
        type: object
        items:
          $ref: '#/definitions/ModelProfile'
  ModelProfileCreate:
    type: object
    required:
      - duplicate
      - newProfileName
    properties:
      duplicate:
        type: object
        description: The profile should duplicate from what kind of type, use must append profileName or modelName.  
        properties:
          modelName:
            type: string
            description: Unique identifier representing a specific model name.
          profileName:
            type: string
            description: Unique profile name.  
      newProfileName:
        type: string
        description: Unique new profile name.  
  ModelProfilePatch:
    type: object
    properties:
      status:
        type: string
        enum:
        - draft
        - ready
        description: Status of profile.    
      isDefault:
        type: boolean
        description: Profile is default or not.  
      profileName:
        type: string
        description: Unique profile name.  
  ProfileNameExist:
    type: object
    properties:
      data:
        type: object
        properties:
          exist:
            type: boolean
            description: Determining if the profileName exists in this project.
externalDocs:
  url: 'http://#'
  x-mocks:
    ModelProfile:
      {
        "profileId": 1,
        "modelName": "UC-8112",
        "profileName": "test",
        "createdBy": "owen",
        "status": "ready",
        "isDefault": true,
        "createdAt": "2019-02-26T14:10:33:000Z",
        "updatedAt": "2019-02-26T14:10:33:000Z"
      }
    ModelProfileRes:
      {
        "data": {
          "profileId": 1,
          "modelName": "UC-8112",
          "profileName": "test",
          "createdBy": "owen",
          "status": "ready",
          "isDefault": true,
          "createdAt": "2019-02-26T14:10:33:000Z",
          "updatedAt": "2019-02-26T14:10:33:000Z"
        }
      }
    ModelProfileList:
      {
        "count": 1,
        "data": [
          {
            "profileId": 1,
            "modelName": "UC-8112",
            "profileName": "test",
            "createdBy": "owen",
            "status": "ready",
            "isDefault": true,
            "createdAt": "2019-02-26T14:10:33:000Z",
            "updatedAt": "2019-02-26T14:10:33:000Z"
          }
        ]
      }
    ModelProfileCreate:
      {
        "duplicate": {
          "sourceType": "profileName"
          "profileName": "name",
          "modelName": "UC-8112"
        },
        "newProfileName": "test"
      }
    ModelProfilePatch:
      {
         "isDefault": true,
         "status": "ready",
         "profileName": "newName"
      }
    ProfileNameExist:
      { 
        "data": {
          "exist": true 
        }
      }
    ProfileDownload:
      {
        "data": {
          "profileLink": "http://www.moxa.com/download=12345"
        }
      }