swagger: '2.0'

info:
  version: 0.0.0
  title: ThingsPro Admin Portal RESTful API reference
basePath: '/api/v1'
schemes:
  - http
  - https
produces:
  - application/json

tags:
  - name: user
    description: Handles user field data

paths:
  /users:
    get:
      description: Get all users field data
      tags:
        - user
      parameters:
        - name: username
          in: query
          description: Filter the user list by user username
          required: false
          type: string
        - name: email
          in: query
          description: Filter the user list by email
          required: false
          type: string
        - name: status
          in: query
          description: Filter the user list by enabled
          required: false
          type: string
          enum:
          - enable
          - disable
        - name: order
          in: query
          description: The user list order by some keyword.
          required: false
          type: string
          enum:
          - name
          - email
          - enabled
        - name: sort
          in: query
          description: Sorting the filter user list, default is desc
          required: false
          type: string
          enum:
          - desc
          - asc
        - name: limit
          in: query
          description: max return users count (default is 100 and max is 1000)
          required: false
          type: integer
        - name: offset
          in: query
          description: offset
          required: false
          type: integer
      responses:
        200:
          description: An array of users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
            example:
              $ref: '#/externalDocs/x-mocks/UserList'

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        description: User unique identifier
        required: true
        type: string
    get:
      description: Return user data with given ID
      tags:
        - user
      responses:
        200:
          description: An Object of the user
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
            example:
              $ref: '#/externalDocs/x-mocks/User'
    put:
      description: Return updated user data with given ID
      tags:
        - user
      parameters:
        - name: body
          in: body
          description: Information of User
          required: true
          schema:
            $ref: '#/definitions/UserUpdate'
      responses:
        200:
          description: An Object of the user
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
            example:
              $ref: '#/externalDocs/x-mocks/User'
    delete:
      description: Delete User with given ID
      tags:
        - user
      responses:
        204:
          description: success
  /users/changePassword:
    put:
      description: Change user password
      tags:
        - user
      parameters:
        - name: body
          in: body
          description: Information of passowrd ( old password & new password )
          required: true
          schema:
            $ref: '#/definitions/UserChangePassword'
      responses:
        200:
          description: An Object of the user
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
            example:
              $ref: '#/externalDocs/x-mocks/User'
  /users/forgetPassword:
    post:
      description: Send an email to user for reset password
      tags:
        - user
      parameters:
        - name: email
          in: body
          description: Input user email
          required: true
          schema:
            $ref: '#/definitions/UserForgetPassword'
      responses:
        200:
          description: success
  /users/exist/{email}:
    parameters:
      - name: email
        in: path
        description: User email
        required: true
        type: string
    get:
      description: Determining if the email exists in this company
      tags:
        - user
      responses:
        200:
          description: Determining if the email exists
          schema:
            type: object
            items:
              $ref: '#/definitions/UserExist'
            example:
              $ref: '#/externalDocs/x-mocks/UserExist'
  /users/invite:
    post:
      description: Invite users to join this company
      tags:
        - user
      parameters:
        - name: body
          in: body
          description: ''
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/UserInvite'
      responses:
        201:
          description: Invite users successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Invitee'
            example:
              $ref: '#/externalDocs/x-mocks/InviteeList'
  /users/invite/{inviteId}:
    parameters:
      - name: inviteId
        in: path
        description: Invitee data ID
        required: true
        type: string
    get:
      description: Return Invitee data with given ID
      tags:
        - user
      responses:
        200:
          description: An Object of the invitee
          schema:
            type: object
            items:
              $ref: '#/definitions/Invitee'
            example:
              $ref: '#/externalDocs/x-mocks/Invitee'

  /users/register:
    post:
      description: User register.
      tags:
        - user
      parameters:
        - name: body
          in: body
          description: ''
          required: true
          schema:
            $ref: '#/definitions/UserRegister'
      responses:
        200:
          description: An Object of the user
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
            example:
              $ref: '#/externalDocs/x-mocks/User'
  /users/{userId}/revoke:
    parameters:
      - name: userId
        in: path
        description: User unique identifier
        required: true
        type: string
    put:
      description: Revoke user invitation
      tags:
        - user
      responses:
        200:
          description: An Object of the invitee
          schema:
            type: object
            items:
              $ref: '#/definitions/Invitee'
            example:
              $ref: '#/externalDocs/x-mocks/Invitee'
definitions:
  User:
    type: object
    properties:
      userId:
        type: string
        description: Unique identifier representing a specific user.
      username:
        type: string
        description: Username of user.
      email:
        type: string
        description: Email of user.
      status:
        type: string
        enum:
          - enable
          - disable
        description: Status of user.
      role:
        type: array
        description: List of role which contains the user.
        items:
          '$ref': '#/definitions/Role'
      createdAt:
        type: string
        description: User created time, ISO data format, like '2018-08-12T20:17:46.384Z'.
      updatedAt:
        type: string
        description: User last updated time, ISO data format, like '2018-08-12T20:17:46.384Z'.         
      loginedAt:
        type: string
        description: User last login time, ISO data format, like '2018-08-12T20:17:46.384Z'.
      passwordExpiredAt:
        type: string
        description: Last change password time, ISO data format, like '2018-08-12T20:17:46.384Z'.

  Invitee:
    type: object
    properties:
      inviteId:
        type: string
        description: Invite Data ID.
      inviter:
        type: string
        description: Inviter Name.
      email:
        type: string
        description: Email of invitation.
      status:
        type: string
        description: Status of invitation.
      data:
        type: object
        description: Metadata of invitation.
      expiredAt:
        type: string
        description: Expire date of invitation.
      createdAt:
        type: string
        description: Create date of invitation.
      updatedAt:
        type: string
        description: Update date of invitation.

  UserExist:
    type: object
    properties:
      exist:
        type: boolean
        description: Determining if the email exists in this company.

  UserChangePassword:
    type: object
    properties:
      oldPassword:
        type: string
        description: Old Password.
        maxLength: 100
      newPassword:
        type: string
        description: New Passoword.
        maxLength: 100

  UserForgetPassword:
    type: object
    properties:
      email:
        type: string
        description: Email of user.
        maxLength: 254

  UserUpdate:
    type: object
    properties:
      username:
        type: string
        description: Display name of user.
        maxLength: 30
      email:
        type: string
        description: Email of user.
        maxLength: 254
      oldPassword:
        type: string
        description: Old password of user login.
      newPassword:
        type: string
        description: New password of user login.
      status:
        type: string
        enum:
          - enable
          - disable
        description: Status of user.
      roleId:
        type: integer
        description: Role id.
  UserInvite:
    type: object
    properties:
      email:
        type: string
        description: Email of user.
        maxLength: 254
      roleId:
        type: integer
        description: Role id.  

  UserRegister:
    type: object
    properties:
      inviteId:
        type: string
        description: Invite Data ID.
      email:
        type: string
        description: Email of user.
        maxLength: 254
      displayName:
        type: string
        description: Username of user.
      password:
        type: string
        description: Login password.
        example: '12345678'

externalDocs:
  url: 'http://#'
  x-mocks:
    User:
      {
        "userId": "a1be69eb-258e-4c66-b07b-583474e57305",
        "username": "Owen",
        "email": "rick.peng@moxa.com",
        "status": "enable",
        "role": {
            "roleId": 2,
            "name": "Administrator",
            "admin": true,
            "permissions": [
              {
                "id": 1,
                "value": 0
              },
              {
                "id": 2,
                "value": 0
              }
            ]
        },
        "createdAt": "2019-03-08T08:44:13.425Z",
        "updatedAt": "2019-03-08T08:44:13.425Z",
        "loginedAt": "",
        "passwordExpiredAt": "2019-01-22T07:51:26.214Z"
      }
    UserExist:
      { "exist": true }
    UserChangePassword:
      {
        "oldPassword":"moxamoxa",
        "newPassword":"123456"
      }
    UserForgetPassword:
      {
        "email":"cainhc.chen@moxa.com"
      }
    UserRsetPassword:
      {
        "password":"moxamoxa"
      }
    UserUpdate:
      {
        "username": "Cain Chen",
        "email": "cainhc.chen@moxa.com",
        "status": "disable",
        "oldPassword":"123456",
        "newPassword":"moxamoxa"
      }
    UserInvite:
      [
        {
          "email":"13579@moxa.com",
          "roleId": 3
        },
        {
          "email":"24680@moxa.com",
          "roleId": 3
        }
      ]
    UserList:
      {
        "count": 8,
        "data": [
          {
            "userId": "a1be69eb-258e-4c66-b07b-583474e57305",
            "username": "Owen",
             "role": {
                "roleId": 2,
                "name": "user",
                "admin": false,
                "permissions": [
                  {
                    "id": 1,
                    "value": 0
                  },
                  {
                    "id": 2,
                    "value": 0
                  }
                ]
            },
            "email": "rick.peng@moxa.com",
            "status": "enable",
            "createdAt": "2019-03-08T08:44:13.425Z",
            "updatedAt": "2019-03-08T08:44:13.425Z",
            "loginedAt": "",
            "passwordExpiredAt": "2019-01-22T07:51:26.214Z"
          }
        ],
        "limit": 1,
        "offset": 0
      }
    Invitee:
      {
        "inviteId": "762e7efb-8b49-4855-89a3-30f3adabf580",
        "inviter": "Cain Chen",
        "email": "22222@moxa.com",
        "status": "Inviting",
        "expiredAt": "2019-02-24T08:41:29.773480Z",
        "createdAt": "2019-02-17T08:41:29.773480Z",
        "updatedAt": "2019-02-17T08:41:29.773480Z"
      }
    InviteeList:
      {
        "data": [
          {
            "createdAt": "2019-03-14T10:04:53.034540Z",
            "email": "201903141802@moxa.com",
            "expiredAt": "2019-03-21T10:04:53.034540Z",
            "inviteId": "9a9812d8-86c9-4a71-aaf9-7103e67c2148",
            "inviter": "Cain Chen",
            "status": "inviting",
            "updatedAt": "2019-03-14T10:04:53.034540Z"
          },
          {
            "createdAt": "2019-03-14T10:04:53.034540Z",
            "email": "201903141803@moxa.com",
            "expiredAt": "2019-03-21T10:04:53.034540Z",
            "inviteId": "d7109838-690d-487d-8f9f-98ad70c2de72",
            "inviter": "Cain Chen",
            "status": "inviting",
            "updatedAt": "2019-03-14T10:04:53.034540Z"
          }
        ]
      }
    UserRegister:
      {
        "inviteId": "f7e78dbe-d04e-4ad9-a2a0-39dbf29e1ed5",
        "email": "201903181112@moxa.com",
        "username": "Test 201903181112",
        "password": "moxamoxa"
      }
