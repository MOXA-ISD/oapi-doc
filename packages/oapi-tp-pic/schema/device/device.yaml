swagger: '2.0'

info:
  version: 0.0.0
  title: ThingsPro PIC service RESTful API reference
basePath: '/api/v1'
schemes:
  - http
  - https
produces:
  - application/json
tags:
  - name: device
    description: Handles device enroll and resiter function

paths:
  /devices:
    get:
      description: Get all devices data
      parameters:
        - name: modelType
          in: query
          description: Filter the device list by modelType
          required: false
          type: string
        - name: mac
          in: query
          description: Filter the device list by mac
          required: false
          type: string
        - name: status
          in: query
          description: Filter the device list by status
          required: false
          type: string  
        - name: order
          in: query
          description: The device list order by some keyword. default is order by 'tag'
          required: false
          type: string
          enum:
          - modelType
          - mac
          - status
          - updatedAt
        - name: sort
          in: query
          description: Sorting the filter device list, default is desc
          required: false
          type: string
          enum:
          - desc
          - asc
        - name: limit
          in: query
          description: max return device count (default is 100 and max is 1000)
          required: false
          type: integer
        - name: offset
          in: query
          description: offset
          required: false
          type: integer
      responses:
        200:
          description: An array of device list
          schema:
            type: array
            items:
              $ref: '#/definitions/Device'
            example: 
              $ref: '#/externalDocs/x-mocks/DeviceList'
      tags:
        - device
  /connect:
    parameters:
      - name: body
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/ConnectReq'
    post:
      description: Register device and return iot connection data
      tags:
        - device
      responses:
        200:
          description: Connect device sucess
          schema:
            type: object
            items:
              $ref: '#/definitions/ConnectRes'
            example:
              $ref: '#/externalDocs/x-mocks/ConnectRes'
    delete:
      description: Unregister device
      tags:
        - device
      responses:
        200:
          description: Unregister device success

  /enroll:
    parameters:
      - name: body
        in: body
        description: ''
        required: true
        schema:
          $ref: '#/definitions/EnrollReq'
    post:
      description: Enroll a device
      tags:
        - device
      responses:
        200:
          description: Enroll device sucess
          schema:
            type: object
            items:
              $ref: '#/definitions/EnrollRes'
            example:
              $ref: '#/externalDocs/x-mocks/EnrollRes'

  /batchEnroll:
    parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/BatchEnrollReq'
    post:
      description: Enroll a group of devices
      tags:
        - device
      responses:
        200:
          description: Enroll device sucess
          schema:
            type: object
            items:
              $ref: '#/definitions/BatchEnrollRes'
            example:
              $ref: '#/externalDocs/x-mocks/BatchEnrollRes'
definitions:
  Device:
    type: object
    properties:
      mac:
        type: string
        description: Device mac.
      sn:
        type: string
        description: Device serial number.
      tag:
        type: string
        description: Device tag.   
      modelType:
        type: string
        description: Device tag.   
      uuid:
        type: string
        description: Device uuid.
      moxaSN:
        type: string
        description: moxaSN.
      certSN:
        type: string
        description: certSN.  
      status:
        type: string
        enum:
        - unregistered
        - registered
        - enrolled
        description: status.  
      enrolledAt:
        type: string
        description: Device enrolled time, ISO data format, like '2018-08-12T20:17:46.384Z'.
      registeredAt:
        type: string
        description: Device registered time, ISO data format, like '2018-08-12T20:17:46.384Z'.
      updatedAt:
        type: string
        description: Device last updated time, ISO data format, like '2018-08-12T20:17:46.384Z'.
  ConnectReq:
    type: object
    description: Device connection data payload
    required:
    - url
    - username
    - password
    properties:
      url:
        type: string
        description: Tenant portal url.
      username:
        type: string
        description: Tenant portal username.
      password:
        type: string
        description: Tenant portal password.    
  ConnectRes:
    type: object
    properties:
      errorCode:
        type: integer
        description: |
          If http status code is not 200, user should reference this value to identify failure reason. 
          200: cannot connect tenant portal 
          201: wrong username or password 
          202: permission denied 
          203: model type mismatch
      reason:
        type: string
        description: If http status code is not 200, user sholud reference this reason to identify failure reason.
      data:
        type: string
        description: IOT connection data.    
  EnrollReq:
    type: object
    required:
    - mac
    - sn
    - modelType
    properties:
      mac:
        type: string
        description: Device mac.
      sn:
        type: string
        description: Device serial number.
      modelType:
        type: string
        description: Deice model Type.    
      tag:
        type: string
        description: Device tag.   
  BatchEnrollReq:
    type: array
    items:
      '$ref': '#/definitions/EnrollReq'
  EnrollRes:
    type: object
    properties:
      mac:
        type: string
        description: Device mac.
      privateKey:
        type: string
        description: Private key.
      certificate:
        type: string
        description: Certificate.
      rootCA:
        type: string
        description: RootCA.   
  BatchEnrollRes:
    type: array
    items:
      '$ref': '#/definitions/EnrollReq'
externalDocs:
  url: 'http://#'
  x-mocks:
    Device:
      {
        "modelType": "UC-8112",
        "mac": "00:11:22:33:44:55",
        "sn": "12345678",
        "tag": "moxa",
        "uuid": "c3d4e60e-3519-4819-9051-8efbc1d700f1",
        "moxaSN": "123456",
        "certSN": "123456",
        "cert": "1234",
        "status": "enrolled",
        "enrollAt": "2019-03-26T07:51:35.663935Z",
        "registerAt": "2019-03-26T07:51:35.663935Z",
        "lastConnectedAt": "2019-03-26T07:51:35.663935Z"
      }
    DeviceList:
      {
        "count": 5,
        "offset": 0,
        "limit": 100,
        "data":
          [
            {
              "modelType": "UC-8112",
              "mac": "00:11:22:33:44:55",
              "sn": "12345678",
              "tag": "moxa",
              "uuid": "c3d4e60e-3519-4819-9051-8efbc1d700f1",
              "moxaSN": "123456",
              "certSN": "123456",
              "cert": "1234",
              "status": "enrolled",
              "enrolledAt": "2019-03-26T07:51:35.663935Z",
              "registeredAt": "2019-03-26T07:51:35.663935Z",
              "lastConnectedAt": "2019-03-26T07:51:35.663935Z"
            }
          ]
      }
    ConnectReq:
      {
        "url": "http://www.moxa.com",
        "username": "moxa",
        "password": "1234"
      }
    ConnectRes:
      {
        "resultCode": 100,
        "reason": "Connection failure reason",
        "data": 
          {
            "cloudProvider": “aws”, 
            "hostname": "http://www.moxa.com",
            "authType": "x509"
          }
      }  
    EnrollReq:
      {
        "mac": "00:11:22:33:44:55",
        "sn": "12345678",
        "modelType": "UC-8112",
        "tag": "1234"
      }
    EnrollRes:
      {
        "privateKey": "moxa",
        "certificate": "moxa",
        "rootCA": "1234"
      }
    BatchEnrollRes:
      [
        {
          "mac": "00:11:22:33:44:55",
          "privateKey": "moxa",
          "certificate": "moxa",
          "rootCA": "1234"
        }
      ]
      
